// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "FpgaRaft.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::janus;

class FpgaRaftHandler : virtual public FpgaRaftIf {
 public:
  FpgaRaftHandler(TxLogServer *sched)
    : sched_((FpgaRaftServer*)sched) {
    // Your initialization goes here
    struct timespec curr_time;
    clock_gettime(CLOCK_MONOTONIC_RAW, &curr_time);
    srand(curr_time.tv_nsec);
  }

  void Heartbeat(const int64_t leaderPrevLogIndex, const DepId& dep_id, const int64_t followerPrevLogIndex) {
    // Your implementation goes here
  	*followerPrevLogIndex = sched_->lastLogIndex;
    printf("Heartbeat\n");
  }

  void Forward(const std::string& cmd, const int64_t cmt_idx) {
    // Your implementation goes here
    verify(sched_ != nullptr);
    sched_->OnForward(const_cast<MarshallDeputy&>(cmd).sp_data_, cmt_idx,
    // std::bind(&rrr::DeferredReply::reply, defer)
    );
    printf("Forward\n");
  }

  void Vote(const int64_t lst_log_idx, const std::string& lst_log_term, const std::string& par_id, const std::string& cur_term, const std::string& max_ballot, const bool vote_granted) {
    // Your implementation goes here
    verify(sched_ != nullptr);
    sched_->OnVote(lst_log_idx,lst_log_term, can_id, can_term, reply_term, vote_granted,
    // std::bind(&rrr::DeferredReply::reply, defer)
    );
    printf("Vote\n");
  }

  void Vote2FPGA(const int64_t lst_log_idx, const std::string& lst_log_term, const std::string& par_id, const std::string& cur_term, const std::string& max_ballot, const bool vote_granted) {
  // Your implementation goes here
    verify(sched_ != nullptr);
    sched_->OnVote2FPGA(lst_log_idx,lst_log_term, can_id, can_term, reply_term, vote_granted,
    // std::bind(&rrr::DeferredReply::reply, defer)
    );
    printf("Vote2FPGA\n");
  }

  void AppendEntries(const int64_t slot, const std::string& ballot, const int64_t leaderCurrentTerm, const int64_t leaderPrevLogIndex, const int64_t leaderPrevLogTerm, const int64_t leaderCommitIndex, const DepId& dep_id, const std::string& cmd, const int64_t followerAppendOK, const int64_t followerCurrentTerm, const int64_t followerLastLogIndex) {
    // Your implementation goes here
    verify(sched_ != nullptr);
    Coroutine::CreateRun([&] () {
    sched_->OnAppendEntries(slot,
                            ballot,
                            leaderCurrentTerm,
                            leaderPrevLogIndex,
                            leaderPrevLogTerm,
                            leaderCommitIndex,
														dep_id,
                            const_cast<MarshallDeputy&>(md_cmd).sp_data_,
                            followerAppendOK,
                            followerCurrentTerm,
                            followerLastLogIndex,
                            // std::bind(&rrr::DeferredReply::reply, defer)
                            );
    });
    printf("AppendEntries\n");
  }

  void AppendEntries2(const int64_t slot, const std::string& ballot, const int64_t leaderCurrentTerm, const int64_t leaderPrevLogIndex, const int64_t leaderPrevLogTerm, const int64_t leaderCommitIndex, const DepId& dep_id, const std::string& cmd, const int64_t followerAppendOK, const int64_t followerCurrentTerm, const int64_t followerLastLogIndex) {
    // Your implementation goes here
    verify(sched_ != nullptr);
	  *followerAppendOK = 1;
    printf("AppendEntries2\n");
  }

  void Decide(const int64_t slot, const std::string& ballot, const DepId& dep_id, const std::string& cmd) {
    // Your implementation goes here
    verify(sched_ != nullptr);
    Coroutine::CreateRun([&] () {
    sched_->OnCommit(slot,
                     ballot,
                     const_cast<MarshallDeputy&>(md_cmd).sp_data_);
    printf("Decide\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<FpgaRaftHandler> handler(new FpgaRaftHandler());
  ::std::shared_ptr<TProcessor> processor(new FpgaRaftProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

