/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef rcc_rpc_TYPES_H
#define rcc_rpc_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace janus {

class DepId;

typedef struct _DepId__isset {
  _DepId__isset() : str(false), id(false) {}
  bool str :1;
  bool id :1;
} _DepId__isset;

class DepId : public virtual ::apache::thrift::TBase {
 public:

  DepId(const DepId&);
  DepId& operator=(const DepId&);
  DepId() noexcept
        : str(),
          id(0) {
  }

  virtual ~DepId() noexcept;
  std::string str;
  int64_t id;

  _DepId__isset __isset;

  void __set_str(const std::string& val);

  void __set_id(const int64_t val);

  bool operator == (const DepId & rhs) const
  {
    if (!(str == rhs.str))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const DepId &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DepId & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(DepId &a, DepId &b);

std::ostream& operator<<(std::ostream& out, const DepId& obj);

} // namespace

#endif
