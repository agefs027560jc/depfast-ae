/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#ifndef FpgaRaft_H
#define FpgaRaft_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "rcc_rpc_types.h"

#include "__dep__.h"
#include "constants.h"
#include "../rcc/graph.h"
#include "../rcc/graph_marshaler.h"
#include "../command.h"
#include "deptran/procedure.h"
#include "../command_marshaler.h"
#include "../rcc_rpc.h"

class SimpleCommand;

namespace janus {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class TxLogServer;
class FpgaRaftServer;
class FpgaRaftIf {
 public:
  virtual ~FpgaRaftIf() {}
  virtual void Heartbeat(const int64_t leaderPrevLogIndex, const DepId& dep_id, const int64_t followerPrevLogIndex) = 0;
  virtual void Forward(const MarshallDeputy& cmd, const int64_t cmt_idx) = 0;
  virtual void Vote(const int64_t lst_log_idx, const ballot_t& lst_log_term, parid_t& par_id, const ballot_t& cur_term, const ballot_t& max_ballot, const bool vote_granted) = 0;
  virtual void Vote2FPGA(const int64_t lst_log_idx, const ballot_t& lst_log_term, const parid_t& par_id, const ballot_t& cur_term, const ballot_t& max_ballot, const bool vote_granted) = 0;
  virtual void AppendEntries(const int64_t slot, const ballot_t& ballot, const int64_t leaderCurrentTerm, const int64_t leaderPrevLogIndex, const int64_t leaderPrevLogTerm, const int64_t leaderCommitIndex, const DepId& dep_id, const MarshallDeputy& cmd, const int64_t followerAppendOK, const int64_t followerCurrentTerm, const int64_t followerLastLogIndex) = 0;
  virtual void AppendEntries2(const int64_t slot, const ballot_t& ballot, const int64_t leaderCurrentTerm, const int64_t leaderPrevLogIndex, const int64_t leaderPrevLogTerm, const int64_t leaderCommitIndex, const DepId& dep_id, const MarshallDeputy& cmd, const int64_t followerAppendOK, const int64_t followerCurrentTerm, const int64_t followerLastLogIndex) = 0;
  virtual void Decide(const int64_t slot, const ballot_t& ballot, const DepId& dep_id, const MarshallDeputy& cmd) = 0;
};

class FpgaRaftIfFactory {
 public:
  typedef FpgaRaftIf Handler;

  virtual ~FpgaRaftIfFactory() {}

  virtual FpgaRaftIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(FpgaRaftIf* /* handler */) = 0;
  };

class FpgaRaftIfSingletonFactory : virtual public FpgaRaftIfFactory {
 public:
  FpgaRaftIfSingletonFactory(const ::std::shared_ptr<FpgaRaftIf>& iface) : iface_(iface) {}
  virtual ~FpgaRaftIfSingletonFactory() {}

  virtual FpgaRaftIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(FpgaRaftIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<FpgaRaftIf> iface_;
};

class FpgaRaftNull : virtual public FpgaRaftIf {
 public:
  virtual ~FpgaRaftNull() {}
  void Heartbeat(const int64_t /* leaderPrevLogIndex */, const DepId& /* dep_id */, const int64_t /* followerPrevLogIndex */) override {
    return;
  }
  void Forward(const MarshallDeputy& /* cmd */, const int64_t /* cmt_idx */) override {
    return;
  }
  void Vote(const int64_t /* lst_log_idx */, const ballot_t& /* lst_log_term */, const parid_t& /* par_id */, const ballot_t& /* cur_term */, const ballot_t& /* max_ballot */, const bool /* vote_granted */) override {
    return;
  }
  void Vote2FPGA(const int64_t /* lst_log_idx */, const ballot_t& /* lst_log_term */, const parid_t& /* par_id */, const ballot_t& /* cur_term */, const ballot_t& /* max_ballot */, const bool /* vote_granted */) override {
    return;
  }
  void AppendEntries(const int64_t /* slot */, const ballot_t& /* ballot */, const int64_t /* leaderCurrentTerm */, const int64_t /* leaderPrevLogIndex */, const int64_t /* leaderPrevLogTerm */, const int64_t /* leaderCommitIndex */, const DepId& /* dep_id */, const MarshallDeputy& /* cmd */, const int64_t /* followerAppendOK */, const int64_t /* followerCurrentTerm */, const int64_t /* followerLastLogIndex */) override {
    return;
  }
  void AppendEntries2(const int64_t /* slot */, const ballot_t& /* ballot */, const int64_t /* leaderCurrentTerm */, const int64_t /* leaderPrevLogIndex */, const int64_t /* leaderPrevLogTerm */, const int64_t /* leaderCommitIndex */, const DepId& /* dep_id */, const MarshallDeputy& /* cmd */, const int64_t /* followerAppendOK */, const int64_t /* followerCurrentTerm */, const int64_t /* followerLastLogIndex */) override {
    return;
  }
  void Decide(const int64_t /* slot */, const ballot_t& /* ballot */, const DepId& /* dep_id */, const MarshallDeputy& /* cmd */) override {
    return;
  }
};

typedef struct _FpgaRaft_Heartbeat_args__isset {
  _FpgaRaft_Heartbeat_args__isset() : leaderPrevLogIndex(false), dep_id(false), followerPrevLogIndex(false) {}
  bool leaderPrevLogIndex :1;
  bool dep_id :1;
  bool followerPrevLogIndex :1;
} _FpgaRaft_Heartbeat_args__isset;

class FpgaRaft_Heartbeat_args {
 public:

  FpgaRaft_Heartbeat_args(const FpgaRaft_Heartbeat_args&);
  FpgaRaft_Heartbeat_args& operator=(const FpgaRaft_Heartbeat_args&);
  FpgaRaft_Heartbeat_args() noexcept
                          : leaderPrevLogIndex(0),
                            followerPrevLogIndex(0) {
  }

  virtual ~FpgaRaft_Heartbeat_args() noexcept;
  int64_t leaderPrevLogIndex;
  DepId dep_id;
  int64_t followerPrevLogIndex;

  _FpgaRaft_Heartbeat_args__isset __isset;

  void __set_leaderPrevLogIndex(const int64_t val);

  void __set_dep_id(const DepId& val);

  void __set_followerPrevLogIndex(const int64_t val);

  bool operator == (const FpgaRaft_Heartbeat_args & rhs) const
  {
    if (!(leaderPrevLogIndex == rhs.leaderPrevLogIndex))
      return false;
    if (!(dep_id == rhs.dep_id))
      return false;
    if (!(followerPrevLogIndex == rhs.followerPrevLogIndex))
      return false;
    return true;
  }
  bool operator != (const FpgaRaft_Heartbeat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FpgaRaft_Heartbeat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FpgaRaft_Heartbeat_pargs {
 public:


  virtual ~FpgaRaft_Heartbeat_pargs() noexcept;
  const int64_t* leaderPrevLogIndex;
  const DepId* dep_id;
  const int64_t* followerPrevLogIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FpgaRaft_Heartbeat_result {
 public:

  FpgaRaft_Heartbeat_result(const FpgaRaft_Heartbeat_result&) noexcept;
  FpgaRaft_Heartbeat_result& operator=(const FpgaRaft_Heartbeat_result&) noexcept;
  FpgaRaft_Heartbeat_result() noexcept {
  }

  virtual ~FpgaRaft_Heartbeat_result() noexcept;

  bool operator == (const FpgaRaft_Heartbeat_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FpgaRaft_Heartbeat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FpgaRaft_Heartbeat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FpgaRaft_Heartbeat_presult {
 public:


  virtual ~FpgaRaft_Heartbeat_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FpgaRaft_Forward_args__isset {
  _FpgaRaft_Forward_args__isset() : cmd(false), cmt_idx(false) {}
  bool cmd :1;
  bool cmt_idx :1;
} _FpgaRaft_Forward_args__isset;

class FpgaRaft_Forward_args {
 public:

  FpgaRaft_Forward_args(const FpgaRaft_Forward_args&);
  FpgaRaft_Forward_args& operator=(const FpgaRaft_Forward_args&);
  FpgaRaft_Forward_args() noexcept
                        : cmd(),
                          cmt_idx(0) {
  }

  virtual ~FpgaRaft_Forward_args() noexcept;
  MarshallDeputy cmd;
  int64_t cmt_idx;

  _FpgaRaft_Forward_args__isset __isset;

  void __set_cmd(const MarshallDeputy& val);

  void __set_cmt_idx(const int64_t val);

  bool operator == (const FpgaRaft_Forward_args & rhs) const
  {
    if (!(cmd == rhs.cmd))
      return false;
    if (!(cmt_idx == rhs.cmt_idx))
      return false;
    return true;
  }
  bool operator != (const FpgaRaft_Forward_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FpgaRaft_Forward_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FpgaRaft_Forward_pargs {
 public:


  virtual ~FpgaRaft_Forward_pargs() noexcept;
  const MarshallDeputy* cmd;
  const int64_t* cmt_idx;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FpgaRaft_Forward_result {
 public:

  FpgaRaft_Forward_result(const FpgaRaft_Forward_result&) noexcept;
  FpgaRaft_Forward_result& operator=(const FpgaRaft_Forward_result&) noexcept;
  FpgaRaft_Forward_result() noexcept {
  }

  virtual ~FpgaRaft_Forward_result() noexcept;

  bool operator == (const FpgaRaft_Forward_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FpgaRaft_Forward_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FpgaRaft_Forward_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FpgaRaft_Forward_presult {
 public:


  virtual ~FpgaRaft_Forward_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FpgaRaft_Vote_args__isset {
  _FpgaRaft_Vote_args__isset() : lst_log_idx(false), lst_log_term(false), par_id(false), cur_term(false), max_ballot(false), vote_granted(false) {}
  bool lst_log_idx :1;
  bool lst_log_term :1;
  bool par_id :1;
  bool cur_term :1;
  bool max_ballot :1;
  bool vote_granted :1;
} _FpgaRaft_Vote_args__isset;

class FpgaRaft_Vote_args {
 public:

  FpgaRaft_Vote_args(const FpgaRaft_Vote_args&);
  FpgaRaft_Vote_args& operator=(const FpgaRaft_Vote_args&);
  FpgaRaft_Vote_args() noexcept
                     : lst_log_idx(0),
                       lst_log_term(),
                       par_id(),
                       cur_term(),
                       max_ballot(),
                       vote_granted(0) {
  }

  virtual ~FpgaRaft_Vote_args() noexcept;
  int64_t lst_log_idx;
  ballot_t lst_log_term;
  parid_t par_id;
  ballot_t cur_term;
  ballot_t max_ballot;
  bool vote_granted;

  _FpgaRaft_Vote_args__isset __isset;

  void __set_lst_log_idx(const int64_t val);

  void __set_lst_log_term(const ballot_t& val);

  void __set_par_id(const parid_t& val);

  void __set_cur_term(const ballot_t& val);

  void __set_max_ballot(const ballot_t& val);

  void __set_vote_granted(const bool val);

  bool operator == (const FpgaRaft_Vote_args & rhs) const
  {
    if (!(lst_log_idx == rhs.lst_log_idx))
      return false;
    if (!(lst_log_term == rhs.lst_log_term))
      return false;
    if (!(par_id == rhs.par_id))
      return false;
    if (!(cur_term == rhs.cur_term))
      return false;
    if (!(max_ballot == rhs.max_ballot))
      return false;
    if (!(vote_granted == rhs.vote_granted))
      return false;
    return true;
  }
  bool operator != (const FpgaRaft_Vote_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FpgaRaft_Vote_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FpgaRaft_Vote_pargs {
 public:


  virtual ~FpgaRaft_Vote_pargs() noexcept;
  const int64_t* lst_log_idx;
  const ballot_t* lst_log_term;
  const parid_t* par_id;
  const ballot_t* cur_term;
  const ballot_t* max_ballot;
  const bool* vote_granted;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FpgaRaft_Vote_result {
 public:

  FpgaRaft_Vote_result(const FpgaRaft_Vote_result&) noexcept;
  FpgaRaft_Vote_result& operator=(const FpgaRaft_Vote_result&) noexcept;
  FpgaRaft_Vote_result() noexcept {
  }

  virtual ~FpgaRaft_Vote_result() noexcept;

  bool operator == (const FpgaRaft_Vote_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FpgaRaft_Vote_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FpgaRaft_Vote_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FpgaRaft_Vote_presult {
 public:


  virtual ~FpgaRaft_Vote_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FpgaRaft_Vote2FPGA_args__isset {
  _FpgaRaft_Vote2FPGA_args__isset() : lst_log_idx(false), lst_log_term(false), par_id(false), cur_term(false), max_ballot(false), vote_granted(false) {}
  bool lst_log_idx :1;
  bool lst_log_term :1;
  bool par_id :1;
  bool cur_term :1;
  bool max_ballot :1;
  bool vote_granted :1;
} _FpgaRaft_Vote2FPGA_args__isset;

class FpgaRaft_Vote2FPGA_args {
 public:

  FpgaRaft_Vote2FPGA_args(const FpgaRaft_Vote2FPGA_args&);
  FpgaRaft_Vote2FPGA_args& operator=(const FpgaRaft_Vote2FPGA_args&);
  FpgaRaft_Vote2FPGA_args() noexcept
                          : lst_log_idx(0),
                            lst_log_term(),
                            par_id(),
                            cur_term(),
                            max_ballot(),
                            vote_granted(0) {
  }

  virtual ~FpgaRaft_Vote2FPGA_args() noexcept;
  int64_t lst_log_idx;
  ballot_t lst_log_term;
  parid_t par_id;
  ballot_t cur_term;
  ballot_t max_ballot;
  bool vote_granted;

  _FpgaRaft_Vote2FPGA_args__isset __isset;

  void __set_lst_log_idx(const int64_t val);

  void __set_lst_log_term(const ballot_t& val);

  void __set_par_id(const parid_t& val);

  void __set_cur_term(const ballot_t& val);

  void __set_max_ballot(const ballot_t& val);

  void __set_vote_granted(const bool val);

  bool operator == (const FpgaRaft_Vote2FPGA_args & rhs) const
  {
    if (!(lst_log_idx == rhs.lst_log_idx))
      return false;
    if (!(lst_log_term == rhs.lst_log_term))
      return false;
    if (!(par_id == rhs.par_id))
      return false;
    if (!(cur_term == rhs.cur_term))
      return false;
    if (!(max_ballot == rhs.max_ballot))
      return false;
    if (!(vote_granted == rhs.vote_granted))
      return false;
    return true;
  }
  bool operator != (const FpgaRaft_Vote2FPGA_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FpgaRaft_Vote2FPGA_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FpgaRaft_Vote2FPGA_pargs {
 public:


  virtual ~FpgaRaft_Vote2FPGA_pargs() noexcept;
  const int64_t* lst_log_idx;
  const ballot_t* lst_log_term;
  const parid_t* par_id;
  const ballot_t* cur_term;
  const ballot_t* max_ballot;
  const bool* vote_granted;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FpgaRaft_Vote2FPGA_result {
 public:

  FpgaRaft_Vote2FPGA_result(const FpgaRaft_Vote2FPGA_result&) noexcept;
  FpgaRaft_Vote2FPGA_result& operator=(const FpgaRaft_Vote2FPGA_result&) noexcept;
  FpgaRaft_Vote2FPGA_result() noexcept {
  }

  virtual ~FpgaRaft_Vote2FPGA_result() noexcept;

  bool operator == (const FpgaRaft_Vote2FPGA_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FpgaRaft_Vote2FPGA_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FpgaRaft_Vote2FPGA_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FpgaRaft_Vote2FPGA_presult {
 public:


  virtual ~FpgaRaft_Vote2FPGA_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FpgaRaft_AppendEntries_args__isset {
  _FpgaRaft_AppendEntries_args__isset() : slot(false), ballot(false), leaderCurrentTerm(false), leaderPrevLogIndex(false), leaderPrevLogTerm(false), leaderCommitIndex(false), dep_id(false), cmd(false), followerAppendOK(false), followerCurrentTerm(false), followerLastLogIndex(false) {}
  bool slot :1;
  bool ballot :1;
  bool leaderCurrentTerm :1;
  bool leaderPrevLogIndex :1;
  bool leaderPrevLogTerm :1;
  bool leaderCommitIndex :1;
  bool dep_id :1;
  bool cmd :1;
  bool followerAppendOK :1;
  bool followerCurrentTerm :1;
  bool followerLastLogIndex :1;
} _FpgaRaft_AppendEntries_args__isset;

class FpgaRaft_AppendEntries_args {
 public:

  FpgaRaft_AppendEntries_args(const FpgaRaft_AppendEntries_args&);
  FpgaRaft_AppendEntries_args& operator=(const FpgaRaft_AppendEntries_args&);
  FpgaRaft_AppendEntries_args() noexcept
                              : slot(0),
                                ballot(),
                                leaderCurrentTerm(0),
                                leaderPrevLogIndex(0),
                                leaderPrevLogTerm(0),
                                leaderCommitIndex(0),
                                cmd(),
                                followerAppendOK(0),
                                followerCurrentTerm(0),
                                followerLastLogIndex(0) {
  }

  virtual ~FpgaRaft_AppendEntries_args() noexcept;
  int64_t slot;
  ballot_t ballot;
  int64_t leaderCurrentTerm;
  int64_t leaderPrevLogIndex;
  int64_t leaderPrevLogTerm;
  int64_t leaderCommitIndex;
  DepId dep_id;
  MarshallDeputy cmd;
  int64_t followerAppendOK;
  int64_t followerCurrentTerm;
  int64_t followerLastLogIndex;

  _FpgaRaft_AppendEntries_args__isset __isset;

  void __set_slot(const int64_t val);

  void __set_ballot(const ballot_t& val);

  void __set_leaderCurrentTerm(const int64_t val);

  void __set_leaderPrevLogIndex(const int64_t val);

  void __set_leaderPrevLogTerm(const int64_t val);

  void __set_leaderCommitIndex(const int64_t val);

  void __set_dep_id(const DepId& val);

  void __set_cmd(const MarshallDeputy& val);

  void __set_followerAppendOK(const int64_t val);

  void __set_followerCurrentTerm(const int64_t val);

  void __set_followerLastLogIndex(const int64_t val);

  bool operator == (const FpgaRaft_AppendEntries_args & rhs) const
  {
    if (!(slot == rhs.slot))
      return false;
    if (!(ballot == rhs.ballot))
      return false;
    if (!(leaderCurrentTerm == rhs.leaderCurrentTerm))
      return false;
    if (!(leaderPrevLogIndex == rhs.leaderPrevLogIndex))
      return false;
    if (!(leaderPrevLogTerm == rhs.leaderPrevLogTerm))
      return false;
    if (!(leaderCommitIndex == rhs.leaderCommitIndex))
      return false;
    if (!(dep_id == rhs.dep_id))
      return false;
    if (!(cmd == rhs.cmd))
      return false;
    if (!(followerAppendOK == rhs.followerAppendOK))
      return false;
    if (!(followerCurrentTerm == rhs.followerCurrentTerm))
      return false;
    if (!(followerLastLogIndex == rhs.followerLastLogIndex))
      return false;
    return true;
  }
  bool operator != (const FpgaRaft_AppendEntries_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FpgaRaft_AppendEntries_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FpgaRaft_AppendEntries_pargs {
 public:


  virtual ~FpgaRaft_AppendEntries_pargs() noexcept;
  const int64_t* slot;
  const ballot_t* ballot;
  const int64_t* leaderCurrentTerm;
  const int64_t* leaderPrevLogIndex;
  const int64_t* leaderPrevLogTerm;
  const int64_t* leaderCommitIndex;
  const DepId* dep_id;
  const MarshallDeputy* cmd;
  const int64_t* followerAppendOK;
  const int64_t* followerCurrentTerm;
  const int64_t* followerLastLogIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FpgaRaft_AppendEntries_result {
 public:

  FpgaRaft_AppendEntries_result(const FpgaRaft_AppendEntries_result&) noexcept;
  FpgaRaft_AppendEntries_result& operator=(const FpgaRaft_AppendEntries_result&) noexcept;
  FpgaRaft_AppendEntries_result() noexcept {
  }

  virtual ~FpgaRaft_AppendEntries_result() noexcept;

  bool operator == (const FpgaRaft_AppendEntries_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FpgaRaft_AppendEntries_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FpgaRaft_AppendEntries_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FpgaRaft_AppendEntries_presult {
 public:


  virtual ~FpgaRaft_AppendEntries_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FpgaRaft_AppendEntries2_args__isset {
  _FpgaRaft_AppendEntries2_args__isset() : slot(false), ballot(false), leaderCurrentTerm(false), leaderPrevLogIndex(false), leaderPrevLogTerm(false), leaderCommitIndex(false), dep_id(false), cmd(false), followerAppendOK(false), followerCurrentTerm(false), followerLastLogIndex(false) {}
  bool slot :1;
  bool ballot :1;
  bool leaderCurrentTerm :1;
  bool leaderPrevLogIndex :1;
  bool leaderPrevLogTerm :1;
  bool leaderCommitIndex :1;
  bool dep_id :1;
  bool cmd :1;
  bool followerAppendOK :1;
  bool followerCurrentTerm :1;
  bool followerLastLogIndex :1;
} _FpgaRaft_AppendEntries2_args__isset;

class FpgaRaft_AppendEntries2_args {
 public:

  FpgaRaft_AppendEntries2_args(const FpgaRaft_AppendEntries2_args&);
  FpgaRaft_AppendEntries2_args& operator=(const FpgaRaft_AppendEntries2_args&);
  FpgaRaft_AppendEntries2_args() noexcept
                               : slot(0),
                                 ballot(),
                                 leaderCurrentTerm(0),
                                 leaderPrevLogIndex(0),
                                 leaderPrevLogTerm(0),
                                 leaderCommitIndex(0),
                                 cmd(),
                                 followerAppendOK(0),
                                 followerCurrentTerm(0),
                                 followerLastLogIndex(0) {
  }

  virtual ~FpgaRaft_AppendEntries2_args() noexcept;
  int64_t slot;
  ballot_t ballot;
  int64_t leaderCurrentTerm;
  int64_t leaderPrevLogIndex;
  int64_t leaderPrevLogTerm;
  int64_t leaderCommitIndex;
  DepId dep_id;
  MarshallDeputy cmd;
  int64_t followerAppendOK;
  int64_t followerCurrentTerm;
  int64_t followerLastLogIndex;

  _FpgaRaft_AppendEntries2_args__isset __isset;

  void __set_slot(const int64_t val);

  void __set_ballot(const ballot_t& val);

  void __set_leaderCurrentTerm(const int64_t val);

  void __set_leaderPrevLogIndex(const int64_t val);

  void __set_leaderPrevLogTerm(const int64_t val);

  void __set_leaderCommitIndex(const int64_t val);

  void __set_dep_id(const DepId& val);

  void __set_cmd(const MarshallDeputy& val);

  void __set_followerAppendOK(const int64_t val);

  void __set_followerCurrentTerm(const int64_t val);

  void __set_followerLastLogIndex(const int64_t val);

  bool operator == (const FpgaRaft_AppendEntries2_args & rhs) const
  {
    if (!(slot == rhs.slot))
      return false;
    if (!(ballot == rhs.ballot))
      return false;
    if (!(leaderCurrentTerm == rhs.leaderCurrentTerm))
      return false;
    if (!(leaderPrevLogIndex == rhs.leaderPrevLogIndex))
      return false;
    if (!(leaderPrevLogTerm == rhs.leaderPrevLogTerm))
      return false;
    if (!(leaderCommitIndex == rhs.leaderCommitIndex))
      return false;
    if (!(dep_id == rhs.dep_id))
      return false;
    if (!(cmd == rhs.cmd))
      return false;
    if (!(followerAppendOK == rhs.followerAppendOK))
      return false;
    if (!(followerCurrentTerm == rhs.followerCurrentTerm))
      return false;
    if (!(followerLastLogIndex == rhs.followerLastLogIndex))
      return false;
    return true;
  }
  bool operator != (const FpgaRaft_AppendEntries2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FpgaRaft_AppendEntries2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FpgaRaft_AppendEntries2_pargs {
 public:


  virtual ~FpgaRaft_AppendEntries2_pargs() noexcept;
  const int64_t* slot;
  const ballot_t* ballot;
  const int64_t* leaderCurrentTerm;
  const int64_t* leaderPrevLogIndex;
  const int64_t* leaderPrevLogTerm;
  const int64_t* leaderCommitIndex;
  const DepId* dep_id;
  const MarshallDeputy* cmd;
  const int64_t* followerAppendOK;
  const int64_t* followerCurrentTerm;
  const int64_t* followerLastLogIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FpgaRaft_AppendEntries2_result {
 public:

  FpgaRaft_AppendEntries2_result(const FpgaRaft_AppendEntries2_result&) noexcept;
  FpgaRaft_AppendEntries2_result& operator=(const FpgaRaft_AppendEntries2_result&) noexcept;
  FpgaRaft_AppendEntries2_result() noexcept {
  }

  virtual ~FpgaRaft_AppendEntries2_result() noexcept;

  bool operator == (const FpgaRaft_AppendEntries2_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FpgaRaft_AppendEntries2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FpgaRaft_AppendEntries2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FpgaRaft_AppendEntries2_presult {
 public:


  virtual ~FpgaRaft_AppendEntries2_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FpgaRaft_Decide_args__isset {
  _FpgaRaft_Decide_args__isset() : slot(false), ballot(false), dep_id(false), cmd(false) {}
  bool slot :1;
  bool ballot :1;
  bool dep_id :1;
  bool cmd :1;
} _FpgaRaft_Decide_args__isset;

class FpgaRaft_Decide_args {
 public:

  FpgaRaft_Decide_args(const FpgaRaft_Decide_args&);
  FpgaRaft_Decide_args& operator=(const FpgaRaft_Decide_args&);
  FpgaRaft_Decide_args() noexcept
                       : slot(0),
                         ballot(),
                         cmd() {
  }

  virtual ~FpgaRaft_Decide_args() noexcept;
  int64_t slot;
  ballot_t ballot;
  DepId dep_id;
  MarshallDeputy cmd;

  _FpgaRaft_Decide_args__isset __isset;

  void __set_slot(const int64_t val);

  void __set_ballot(const ballot_t& val);

  void __set_dep_id(const DepId& val);

  void __set_cmd(const MarshallDeputy& val);

  bool operator == (const FpgaRaft_Decide_args & rhs) const
  {
    if (!(slot == rhs.slot))
      return false;
    if (!(ballot == rhs.ballot))
      return false;
    if (!(dep_id == rhs.dep_id))
      return false;
    if (!(cmd == rhs.cmd))
      return false;
    return true;
  }
  bool operator != (const FpgaRaft_Decide_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FpgaRaft_Decide_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FpgaRaft_Decide_pargs {
 public:


  virtual ~FpgaRaft_Decide_pargs() noexcept;
  const int64_t* slot;
  const ballot_t* ballot;
  const DepId* dep_id;
  const MarshallDeputy* cmd;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FpgaRaft_Decide_result {
 public:

  FpgaRaft_Decide_result(const FpgaRaft_Decide_result&) noexcept;
  FpgaRaft_Decide_result& operator=(const FpgaRaft_Decide_result&) noexcept;
  FpgaRaft_Decide_result() noexcept {
  }

  virtual ~FpgaRaft_Decide_result() noexcept;

  bool operator == (const FpgaRaft_Decide_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FpgaRaft_Decide_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FpgaRaft_Decide_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FpgaRaft_Decide_presult {
 public:


  virtual ~FpgaRaft_Decide_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class FpgaRaftClient : virtual public FpgaRaftIf {
 public:
  FpgaRaftClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  FpgaRaftClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Heartbeat(const int64_t leaderPrevLogIndex, const DepId& dep_id, const int64_t followerPrevLogIndex) override;
  void send_Heartbeat(const int64_t leaderPrevLogIndex, const DepId& dep_id, const int64_t followerPrevLogIndex);
  void recv_Heartbeat();
  void Forward(const MarshallDeputy& cmd, const int64_t cmt_idx) override;
  void send_Forward(const MarshallDeputy& cmd, const int64_t cmt_idx);
  void recv_Forward();
  void Vote(const int64_t lst_log_idx, const ballot_t& lst_log_term, const parid_t& par_id, const ballot_t& cur_term, const ballot_t& max_ballot, const bool vote_granted) override;
  void send_Vote(const int64_t lst_log_idx, const ballot_t& lst_log_term, const parid_t& par_id, const ballot_t& cur_term, const ballot_t& max_ballot, const bool vote_granted);
  void recv_Vote();
  void Vote2FPGA(const int64_t lst_log_idx, const ballot_t& lst_log_term, const parid_t& par_id, const ballot_t& cur_term, const ballot_t& max_ballot, const bool vote_granted) override;
  void send_Vote2FPGA(const int64_t lst_log_idx, const ballot_t& lst_log_term, const parid_t& par_id, const ballot_t& cur_term, const ballot_t& max_ballot, const bool vote_granted);
  void recv_Vote2FPGA();
  void AppendEntries(const int64_t slot, const ballot_t& ballot, const int64_t leaderCurrentTerm, const int64_t leaderPrevLogIndex, const int64_t leaderPrevLogTerm, const int64_t leaderCommitIndex, const DepId& dep_id, const MarshallDeputy& cmd, const int64_t followerAppendOK, const int64_t followerCurrentTerm, const int64_t followerLastLogIndex) override;
  void send_AppendEntries(const int64_t slot, const ballot_t& ballot, const int64_t leaderCurrentTerm, const int64_t leaderPrevLogIndex, const int64_t leaderPrevLogTerm, const int64_t leaderCommitIndex, const DepId& dep_id, const MarshallDeputy& cmd, const int64_t followerAppendOK, const int64_t followerCurrentTerm, const int64_t followerLastLogIndex);
  void recv_AppendEntries();
  void AppendEntries2(const int64_t slot, const ballot_t& ballot, const int64_t leaderCurrentTerm, const int64_t leaderPrevLogIndex, const int64_t leaderPrevLogTerm, const int64_t leaderCommitIndex, const DepId& dep_id, const MarshallDeputy& cmd, const int64_t followerAppendOK, const int64_t followerCurrentTerm, const int64_t followerLastLogIndex) override;
  void send_AppendEntries2(const int64_t slot, const ballot_t& ballot, const int64_t leaderCurrentTerm, const int64_t leaderPrevLogIndex, const int64_t leaderPrevLogTerm, const int64_t leaderCommitIndex, const DepId& dep_id, const MarshallDeputy& cmd, const int64_t followerAppendOK, const int64_t followerCurrentTerm, const int64_t followerLastLogIndex);
  void recv_AppendEntries2();
  void Decide(const int64_t slot, const ballot_t& ballot, const DepId& dep_id, const MarshallDeputy& cmd) override;
  void send_Decide(const int64_t slot, const ballot_t& ballot, const DepId& dep_id, const MarshallDeputy& cmd);
  void recv_Decide();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class FpgaRaftProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<FpgaRaftIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (FpgaRaftProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Heartbeat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Forward(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Vote(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Vote2FPGA(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AppendEntries(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AppendEntries2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Decide(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  FpgaRaftProcessor(::std::shared_ptr<FpgaRaftIf> iface) :
    iface_(iface) {
    processMap_["Heartbeat"] = &FpgaRaftProcessor::process_Heartbeat;
    processMap_["Forward"] = &FpgaRaftProcessor::process_Forward;
    processMap_["Vote"] = &FpgaRaftProcessor::process_Vote;
    processMap_["Vote2FPGA"] = &FpgaRaftProcessor::process_Vote2FPGA;
    processMap_["AppendEntries"] = &FpgaRaftProcessor::process_AppendEntries;
    processMap_["AppendEntries2"] = &FpgaRaftProcessor::process_AppendEntries2;
    processMap_["Decide"] = &FpgaRaftProcessor::process_Decide;
  }

  virtual ~FpgaRaftProcessor() {}
};

class FpgaRaftProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  FpgaRaftProcessorFactory(const ::std::shared_ptr< FpgaRaftIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< FpgaRaftIfFactory > handlerFactory_;
};

class FpgaRaftMultiface : virtual public FpgaRaftIf {
 public:
  FpgaRaftMultiface(std::vector<std::shared_ptr<FpgaRaftIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~FpgaRaftMultiface() {}
 protected:
  std::vector<std::shared_ptr<FpgaRaftIf> > ifaces_;
  FpgaRaftMultiface() {}
  void add(::std::shared_ptr<FpgaRaftIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void Heartbeat(const int64_t leaderPrevLogIndex, const DepId& dep_id, const int64_t followerPrevLogIndex) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Heartbeat(leaderPrevLogIndex, dep_id, followerPrevLogIndex);
    }
    ifaces_[i]->Heartbeat(leaderPrevLogIndex, dep_id, followerPrevLogIndex);
  }

  void Forward(const MarshallDeputy& cmd, const int64_t cmt_idx) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Forward(cmd, cmt_idx);
    }
    ifaces_[i]->Forward(cmd, cmt_idx);
  }

  void Vote(const int64_t lst_log_idx, const ballot_t& lst_log_term, const parid_t& par_id, const ballot_t& cur_term, const ballot_t& max_ballot, const bool vote_granted) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Vote(lst_log_idx, lst_log_term, par_id, cur_term, max_ballot, vote_granted);
    }
    ifaces_[i]->Vote(lst_log_idx, lst_log_term, par_id, cur_term, max_ballot, vote_granted);
  }

  void Vote2FPGA(const int64_t lst_log_idx, const ballot_t& lst_log_term, const parid_t& par_id, const ballot_t& cur_term, const ballot_t& max_ballot, const bool vote_granted) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Vote2FPGA(lst_log_idx, lst_log_term, par_id, cur_term, max_ballot, vote_granted);
    }
    ifaces_[i]->Vote2FPGA(lst_log_idx, lst_log_term, par_id, cur_term, max_ballot, vote_granted);
  }

  void AppendEntries(const int64_t slot, const ballot_t& ballot, const int64_t leaderCurrentTerm, const int64_t leaderPrevLogIndex, const int64_t leaderPrevLogTerm, const int64_t leaderCommitIndex, const DepId& dep_id, const MarshallDeputy& cmd, const int64_t followerAppendOK, const int64_t followerCurrentTerm, const int64_t followerLastLogIndex) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AppendEntries(slot, ballot, leaderCurrentTerm, leaderPrevLogIndex, leaderPrevLogTerm, leaderCommitIndex, dep_id, cmd, followerAppendOK, followerCurrentTerm, followerLastLogIndex);
    }
    ifaces_[i]->AppendEntries(slot, ballot, leaderCurrentTerm, leaderPrevLogIndex, leaderPrevLogTerm, leaderCommitIndex, dep_id, cmd, followerAppendOK, followerCurrentTerm, followerLastLogIndex);
  }

  void AppendEntries2(const int64_t slot, const ballot_t& ballot, const int64_t leaderCurrentTerm, const int64_t leaderPrevLogIndex, const int64_t leaderPrevLogTerm, const int64_t leaderCommitIndex, const DepId& dep_id, const MarshallDeputy& cmd, const int64_t followerAppendOK, const int64_t followerCurrentTerm, const int64_t followerLastLogIndex) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AppendEntries2(slot, ballot, leaderCurrentTerm, leaderPrevLogIndex, leaderPrevLogTerm, leaderCommitIndex, dep_id, cmd, followerAppendOK, followerCurrentTerm, followerLastLogIndex);
    }
    ifaces_[i]->AppendEntries2(slot, ballot, leaderCurrentTerm, leaderPrevLogIndex, leaderPrevLogTerm, leaderCommitIndex, dep_id, cmd, followerAppendOK, followerCurrentTerm, followerLastLogIndex);
  }

  void Decide(const int64_t slot, const ballot_t& ballot, const DepId& dep_id, const MarshallDeputy& cmd) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Decide(slot, ballot, dep_id, cmd);
    }
    ifaces_[i]->Decide(slot, ballot, dep_id, cmd);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class FpgaRaftConcurrentClient : virtual public FpgaRaftIf {
 public:
  FpgaRaftConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  FpgaRaftConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Heartbeat(const int64_t leaderPrevLogIndex, const DepId& dep_id, const int64_t followerPrevLogIndex) override;
  int32_t send_Heartbeat(const int64_t leaderPrevLogIndex, const DepId& dep_id, const int64_t followerPrevLogIndex);
  void recv_Heartbeat(const int32_t seqid);
  void Forward(const MarshallDeputy& cmd, const int64_t cmt_idx) override;
  int32_t send_Forward(const MarshallDeputy& cmd, const int64_t cmt_idx);
  void recv_Forward(const int32_t seqid);
  void Vote(const int64_t lst_log_idx, const ballot_t& lst_log_term, const parid_t& par_id, const ballot_t& cur_term, const ballot_t& max_ballot, const bool vote_granted) override;
  int32_t send_Vote(const int64_t lst_log_idx, const ballot_t& lst_log_term, const parid_t& par_id, const ballot_t& cur_term, const ballot_t& max_ballot, const bool vote_granted);
  void recv_Vote(const int32_t seqid);
  void Vote2FPGA(const int64_t lst_log_idx, const ballot_t& lst_log_term, const parid_t& par_id, const ballot_t& cur_term, const ballot_t& max_ballot, const bool vote_granted) override;
  int32_t send_Vote2FPGA(const int64_t lst_log_idx, const ballot_t& lst_log_term, const parid_t& par_id, const ballot_t& cur_term, const ballot_t& max_ballot, const bool vote_granted);
  void recv_Vote2FPGA(const int32_t seqid);
  void AppendEntries(const int64_t slot, const ballot_t& ballot, const int64_t leaderCurrentTerm, const int64_t leaderPrevLogIndex, const int64_t leaderPrevLogTerm, const int64_t leaderCommitIndex, const DepId& dep_id, const MarshallDeputy& cmd, const int64_t followerAppendOK, const int64_t followerCurrentTerm, const int64_t followerLastLogIndex) override;
  int32_t send_AppendEntries(const int64_t slot, const ballot_t& ballot, const int64_t leaderCurrentTerm, const int64_t leaderPrevLogIndex, const int64_t leaderPrevLogTerm, const int64_t leaderCommitIndex, const DepId& dep_id, const MarshallDeputy& cmd, const int64_t followerAppendOK, const int64_t followerCurrentTerm, const int64_t followerLastLogIndex);
  void recv_AppendEntries(const int32_t seqid);
  void AppendEntries2(const int64_t slot, const ballot_t& ballot, const int64_t leaderCurrentTerm, const int64_t leaderPrevLogIndex, const int64_t leaderPrevLogTerm, const int64_t leaderCommitIndex, const DepId& dep_id, const MarshallDeputy& cmd, const int64_t followerAppendOK, const int64_t followerCurrentTerm, const int64_t followerLastLogIndex) override;
  int32_t send_AppendEntries2(const int64_t slot, const ballot_t& ballot, const int64_t leaderCurrentTerm, const int64_t leaderPrevLogIndex, const int64_t leaderPrevLogTerm, const int64_t leaderCommitIndex, const DepId& dep_id, const MarshallDeputy& cmd, const int64_t followerAppendOK, const int64_t followerCurrentTerm, const int64_t followerLastLogIndex);
  void recv_AppendEntries2(const int32_t seqid);
  void Decide(const int64_t slot, const ballot_t& ballot, const DepId& dep_id, const MarshallDeputy& cmd) override;
  int32_t send_Decide(const int64_t slot, const ballot_t& ballot, const DepId& dep_id, const MarshallDeputy& cmd);
  void recv_Decide(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
