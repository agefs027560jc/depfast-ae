/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "FpgaRaft.h"

namespace janus {


FpgaRaft_Heartbeat_args::~FpgaRaft_Heartbeat_args() noexcept {
}


uint32_t FpgaRaft_Heartbeat_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->leaderPrevLogIndex);
          this->__isset.leaderPrevLogIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dep_id.read(iprot);
          this->__isset.dep_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->followerPrevLogIndex);
          this->__isset.followerPrevLogIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FpgaRaft_Heartbeat_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FpgaRaft_Heartbeat_args");

  xfer += oprot->writeFieldBegin("leaderPrevLogIndex", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->leaderPrevLogIndex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dep_id", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dep_id.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("followerPrevLogIndex", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->followerPrevLogIndex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


FpgaRaft_Heartbeat_pargs::~FpgaRaft_Heartbeat_pargs() noexcept {
}


uint32_t FpgaRaft_Heartbeat_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FpgaRaft_Heartbeat_pargs");

  xfer += oprot->writeFieldBegin("leaderPrevLogIndex", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->leaderPrevLogIndex)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dep_id", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dep_id)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("followerPrevLogIndex", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64((*(this->followerPrevLogIndex)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


FpgaRaft_Heartbeat_result::~FpgaRaft_Heartbeat_result() noexcept {
}


uint32_t FpgaRaft_Heartbeat_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FpgaRaft_Heartbeat_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("FpgaRaft_Heartbeat_result");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


FpgaRaft_Heartbeat_presult::~FpgaRaft_Heartbeat_presult() noexcept {
}


uint32_t FpgaRaft_Heartbeat_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


FpgaRaft_Forward_args::~FpgaRaft_Forward_args() noexcept {
}


uint32_t FpgaRaft_Forward_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cmd);
          this->__isset.cmd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cmt_idx);
          this->__isset.cmt_idx = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FpgaRaft_Forward_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FpgaRaft_Forward_args");

  xfer += oprot->writeFieldBegin("cmd", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->cmd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cmt_idx", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->cmt_idx);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


FpgaRaft_Forward_pargs::~FpgaRaft_Forward_pargs() noexcept {
}


uint32_t FpgaRaft_Forward_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FpgaRaft_Forward_pargs");

  xfer += oprot->writeFieldBegin("cmd", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString((*(this->cmd)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cmt_idx", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64((*(this->cmt_idx)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


FpgaRaft_Forward_result::~FpgaRaft_Forward_result() noexcept {
}


uint32_t FpgaRaft_Forward_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FpgaRaft_Forward_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("FpgaRaft_Forward_result");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


FpgaRaft_Forward_presult::~FpgaRaft_Forward_presult() noexcept {
}


uint32_t FpgaRaft_Forward_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


FpgaRaft_Vote_args::~FpgaRaft_Vote_args() noexcept {
}


uint32_t FpgaRaft_Vote_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lst_log_idx);
          this->__isset.lst_log_idx = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lst_log_term);
          this->__isset.lst_log_term = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->par_id);
          this->__isset.par_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cur_term);
          this->__isset.cur_term = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->max_ballot);
          this->__isset.max_ballot = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->vote_granted);
          this->__isset.vote_granted = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FpgaRaft_Vote_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FpgaRaft_Vote_args");

  xfer += oprot->writeFieldBegin("lst_log_idx", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->lst_log_idx);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lst_log_term", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->lst_log_term);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("par_id", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->par_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cur_term", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->cur_term);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_ballot", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->max_ballot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vote_granted", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->vote_granted);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


FpgaRaft_Vote_pargs::~FpgaRaft_Vote_pargs() noexcept {
}


uint32_t FpgaRaft_Vote_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FpgaRaft_Vote_pargs");

  xfer += oprot->writeFieldBegin("lst_log_idx", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->lst_log_idx)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lst_log_term", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString((*(this->lst_log_term)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("par_id", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString((*(this->par_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cur_term", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString((*(this->cur_term)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_ballot", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString((*(this->max_ballot)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vote_granted", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool((*(this->vote_granted)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


FpgaRaft_Vote_result::~FpgaRaft_Vote_result() noexcept {
}


uint32_t FpgaRaft_Vote_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FpgaRaft_Vote_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("FpgaRaft_Vote_result");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


FpgaRaft_Vote_presult::~FpgaRaft_Vote_presult() noexcept {
}


uint32_t FpgaRaft_Vote_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


FpgaRaft_Vote2FPGA_args::~FpgaRaft_Vote2FPGA_args() noexcept {
}


uint32_t FpgaRaft_Vote2FPGA_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lst_log_idx);
          this->__isset.lst_log_idx = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lst_log_term);
          this->__isset.lst_log_term = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->par_id);
          this->__isset.par_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cur_term);
          this->__isset.cur_term = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->max_ballot);
          this->__isset.max_ballot = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->vote_granted);
          this->__isset.vote_granted = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FpgaRaft_Vote2FPGA_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FpgaRaft_Vote2FPGA_args");

  xfer += oprot->writeFieldBegin("lst_log_idx", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->lst_log_idx);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lst_log_term", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->lst_log_term);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("par_id", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->par_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cur_term", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->cur_term);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_ballot", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->max_ballot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vote_granted", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->vote_granted);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


FpgaRaft_Vote2FPGA_pargs::~FpgaRaft_Vote2FPGA_pargs() noexcept {
}


uint32_t FpgaRaft_Vote2FPGA_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FpgaRaft_Vote2FPGA_pargs");

  xfer += oprot->writeFieldBegin("lst_log_idx", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->lst_log_idx)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lst_log_term", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString((*(this->lst_log_term)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("par_id", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString((*(this->par_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cur_term", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString((*(this->cur_term)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_ballot", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString((*(this->max_ballot)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vote_granted", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool((*(this->vote_granted)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


FpgaRaft_Vote2FPGA_result::~FpgaRaft_Vote2FPGA_result() noexcept {
}


uint32_t FpgaRaft_Vote2FPGA_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FpgaRaft_Vote2FPGA_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("FpgaRaft_Vote2FPGA_result");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


FpgaRaft_Vote2FPGA_presult::~FpgaRaft_Vote2FPGA_presult() noexcept {
}


uint32_t FpgaRaft_Vote2FPGA_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


FpgaRaft_AppendEntries_args::~FpgaRaft_AppendEntries_args() noexcept {
}


uint32_t FpgaRaft_AppendEntries_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->slot);
          this->__isset.slot = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ballot);
          this->__isset.ballot = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->leaderCurrentTerm);
          this->__isset.leaderCurrentTerm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->leaderPrevLogIndex);
          this->__isset.leaderPrevLogIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->leaderPrevLogTerm);
          this->__isset.leaderPrevLogTerm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->leaderCommitIndex);
          this->__isset.leaderCommitIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dep_id.read(iprot);
          this->__isset.dep_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cmd);
          this->__isset.cmd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->followerAppendOK);
          this->__isset.followerAppendOK = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->followerCurrentTerm);
          this->__isset.followerCurrentTerm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->followerLastLogIndex);
          this->__isset.followerLastLogIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FpgaRaft_AppendEntries_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FpgaRaft_AppendEntries_args");

  xfer += oprot->writeFieldBegin("slot", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->slot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ballot", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->ballot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leaderCurrentTerm", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->leaderCurrentTerm);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leaderPrevLogIndex", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->leaderPrevLogIndex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leaderPrevLogTerm", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->leaderPrevLogTerm);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leaderCommitIndex", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->leaderCommitIndex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dep_id", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->dep_id.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cmd", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->cmd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("followerAppendOK", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->followerAppendOK);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("followerCurrentTerm", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->followerCurrentTerm);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("followerLastLogIndex", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->followerLastLogIndex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


FpgaRaft_AppendEntries_pargs::~FpgaRaft_AppendEntries_pargs() noexcept {
}


uint32_t FpgaRaft_AppendEntries_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FpgaRaft_AppendEntries_pargs");

  xfer += oprot->writeFieldBegin("slot", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->slot)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ballot", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString((*(this->ballot)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leaderCurrentTerm", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64((*(this->leaderCurrentTerm)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leaderPrevLogIndex", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64((*(this->leaderPrevLogIndex)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leaderPrevLogTerm", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64((*(this->leaderPrevLogTerm)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leaderCommitIndex", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64((*(this->leaderCommitIndex)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dep_id", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += (*(this->dep_id)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cmd", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString((*(this->cmd)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("followerAppendOK", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64((*(this->followerAppendOK)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("followerCurrentTerm", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64((*(this->followerCurrentTerm)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("followerLastLogIndex", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64((*(this->followerLastLogIndex)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


FpgaRaft_AppendEntries_result::~FpgaRaft_AppendEntries_result() noexcept {
}


uint32_t FpgaRaft_AppendEntries_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FpgaRaft_AppendEntries_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("FpgaRaft_AppendEntries_result");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


FpgaRaft_AppendEntries_presult::~FpgaRaft_AppendEntries_presult() noexcept {
}


uint32_t FpgaRaft_AppendEntries_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


FpgaRaft_AppendEntries2_args::~FpgaRaft_AppendEntries2_args() noexcept {
}


uint32_t FpgaRaft_AppendEntries2_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->slot);
          this->__isset.slot = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ballot);
          this->__isset.ballot = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->leaderCurrentTerm);
          this->__isset.leaderCurrentTerm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->leaderPrevLogIndex);
          this->__isset.leaderPrevLogIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->leaderPrevLogTerm);
          this->__isset.leaderPrevLogTerm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->leaderCommitIndex);
          this->__isset.leaderCommitIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dep_id.read(iprot);
          this->__isset.dep_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cmd);
          this->__isset.cmd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->followerAppendOK);
          this->__isset.followerAppendOK = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->followerCurrentTerm);
          this->__isset.followerCurrentTerm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->followerLastLogIndex);
          this->__isset.followerLastLogIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FpgaRaft_AppendEntries2_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FpgaRaft_AppendEntries2_args");

  xfer += oprot->writeFieldBegin("slot", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->slot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ballot", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->ballot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leaderCurrentTerm", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->leaderCurrentTerm);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leaderPrevLogIndex", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->leaderPrevLogIndex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leaderPrevLogTerm", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->leaderPrevLogTerm);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leaderCommitIndex", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->leaderCommitIndex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dep_id", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->dep_id.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cmd", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->cmd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("followerAppendOK", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->followerAppendOK);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("followerCurrentTerm", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->followerCurrentTerm);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("followerLastLogIndex", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->followerLastLogIndex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


FpgaRaft_AppendEntries2_pargs::~FpgaRaft_AppendEntries2_pargs() noexcept {
}


uint32_t FpgaRaft_AppendEntries2_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FpgaRaft_AppendEntries2_pargs");

  xfer += oprot->writeFieldBegin("slot", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->slot)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ballot", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString((*(this->ballot)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leaderCurrentTerm", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64((*(this->leaderCurrentTerm)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leaderPrevLogIndex", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64((*(this->leaderPrevLogIndex)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leaderPrevLogTerm", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64((*(this->leaderPrevLogTerm)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leaderCommitIndex", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64((*(this->leaderCommitIndex)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dep_id", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += (*(this->dep_id)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cmd", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString((*(this->cmd)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("followerAppendOK", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64((*(this->followerAppendOK)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("followerCurrentTerm", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64((*(this->followerCurrentTerm)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("followerLastLogIndex", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64((*(this->followerLastLogIndex)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


FpgaRaft_AppendEntries2_result::~FpgaRaft_AppendEntries2_result() noexcept {
}


uint32_t FpgaRaft_AppendEntries2_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FpgaRaft_AppendEntries2_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("FpgaRaft_AppendEntries2_result");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


FpgaRaft_AppendEntries2_presult::~FpgaRaft_AppendEntries2_presult() noexcept {
}


uint32_t FpgaRaft_AppendEntries2_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


FpgaRaft_Decide_args::~FpgaRaft_Decide_args() noexcept {
}


uint32_t FpgaRaft_Decide_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->slot);
          this->__isset.slot = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ballot);
          this->__isset.ballot = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dep_id.read(iprot);
          this->__isset.dep_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cmd);
          this->__isset.cmd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FpgaRaft_Decide_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FpgaRaft_Decide_args");

  xfer += oprot->writeFieldBegin("slot", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->slot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ballot", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->ballot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dep_id", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->dep_id.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cmd", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->cmd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


FpgaRaft_Decide_pargs::~FpgaRaft_Decide_pargs() noexcept {
}


uint32_t FpgaRaft_Decide_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FpgaRaft_Decide_pargs");

  xfer += oprot->writeFieldBegin("slot", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->slot)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ballot", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString((*(this->ballot)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dep_id", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += (*(this->dep_id)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cmd", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString((*(this->cmd)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


FpgaRaft_Decide_result::~FpgaRaft_Decide_result() noexcept {
}


uint32_t FpgaRaft_Decide_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FpgaRaft_Decide_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("FpgaRaft_Decide_result");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


FpgaRaft_Decide_presult::~FpgaRaft_Decide_presult() noexcept {
}


uint32_t FpgaRaft_Decide_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

void FpgaRaftClient::Heartbeat(const int64_t leaderPrevLogIndex, const DepId& dep_id, const int64_t followerPrevLogIndex)
{
  send_Heartbeat(leaderPrevLogIndex, dep_id, followerPrevLogIndex);
  recv_Heartbeat();
}

void FpgaRaftClient::send_Heartbeat(const int64_t leaderPrevLogIndex, const DepId& dep_id, const int64_t followerPrevLogIndex)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("Heartbeat", ::apache::thrift::protocol::T_CALL, cseqid);

  FpgaRaft_Heartbeat_pargs args;
  args.leaderPrevLogIndex = &leaderPrevLogIndex;
  args.dep_id = &dep_id;
  args.followerPrevLogIndex = &followerPrevLogIndex;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void FpgaRaftClient::recv_Heartbeat()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("Heartbeat") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  FpgaRaft_Heartbeat_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  return;
}

void FpgaRaftClient::Forward(const MarshallDeputy& cmd, const int64_t cmt_idx)
{
  send_Forward(cmd, cmt_idx);
  recv_Forward();
}

void FpgaRaftClient::send_Forward(const MarshallDeputy& cmd, const int64_t cmt_idx)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("Forward", ::apache::thrift::protocol::T_CALL, cseqid);

  FpgaRaft_Forward_pargs args;
  args.cmd = &cmd;
  args.cmt_idx = &cmt_idx;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void FpgaRaftClient::recv_Forward()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("Forward") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  FpgaRaft_Forward_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  return;
}

void FpgaRaftClient::Vote(const int64_t lst_log_idx, const ballot_t& lst_log_term, const parid_t& par_id, const ballot_t& cur_term, const ballot_t& max_ballot, const bool vote_granted)
{
  send_Vote(lst_log_idx, lst_log_term, par_id, cur_term, max_ballot, vote_granted);
  recv_Vote();
}

void FpgaRaftClient::send_Vote(const int64_t lst_log_idx, const ballot_t& lst_log_term, const parid_t& par_id, const ballot_t& cur_term, const ballot_t& max_ballot, const bool vote_granted)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("Vote", ::apache::thrift::protocol::T_CALL, cseqid);

  FpgaRaft_Vote_pargs args;
  args.lst_log_idx = &lst_log_idx;
  args.lst_log_term = &lst_log_term;
  args.par_id = &par_id;
  args.cur_term = &cur_term;
  args.max_ballot = &max_ballot;
  args.vote_granted = &vote_granted;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void FpgaRaftClient::recv_Vote()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("Vote") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  FpgaRaft_Vote_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  return;
}

void FpgaRaftClient::Vote2FPGA(const int64_t lst_log_idx, const ballot_t& lst_log_term, const parid_t& par_id, const ballot_t& cur_term, const ballot_t& max_ballot, const bool vote_granted)
{
  send_Vote2FPGA(lst_log_idx, lst_log_term, par_id, cur_term, max_ballot, vote_granted);
  recv_Vote2FPGA();
}

void FpgaRaftClient::send_Vote2FPGA(const int64_t lst_log_idx, const ballot_t& lst_log_term, const parid_t& par_id, const ballot_t& cur_term, const ballot_t& max_ballot, const bool vote_granted)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("Vote2FPGA", ::apache::thrift::protocol::T_CALL, cseqid);

  FpgaRaft_Vote2FPGA_pargs args;
  args.lst_log_idx = &lst_log_idx;
  args.lst_log_term = &lst_log_term;
  args.par_id = &par_id;
  args.cur_term = &cur_term;
  args.max_ballot = &max_ballot;
  args.vote_granted = &vote_granted;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void FpgaRaftClient::recv_Vote2FPGA()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("Vote2FPGA") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  FpgaRaft_Vote2FPGA_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  return;
}

void FpgaRaftClient::AppendEntries(const int64_t slot, const ballot_t& ballot, const int64_t leaderCurrentTerm, const int64_t leaderPrevLogIndex, const int64_t leaderPrevLogTerm, const int64_t leaderCommitIndex, const DepId& dep_id, const MarshallDeputy& cmd, const int64_t followerAppendOK, const int64_t followerCurrentTerm, const int64_t followerLastLogIndex)
{
  send_AppendEntries(slot, ballot, leaderCurrentTerm, leaderPrevLogIndex, leaderPrevLogTerm, leaderCommitIndex, dep_id, cmd, followerAppendOK, followerCurrentTerm, followerLastLogIndex);
  recv_AppendEntries();
}

void FpgaRaftClient::send_AppendEntries(const int64_t slot, const ballot_t& ballot, const int64_t leaderCurrentTerm, const int64_t leaderPrevLogIndex, const int64_t leaderPrevLogTerm, const int64_t leaderCommitIndex, const DepId& dep_id, const MarshallDeputy& cmd, const int64_t followerAppendOK, const int64_t followerCurrentTerm, const int64_t followerLastLogIndex)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("AppendEntries", ::apache::thrift::protocol::T_CALL, cseqid);

  FpgaRaft_AppendEntries_pargs args;
  args.slot = &slot;
  args.ballot = &ballot;
  args.leaderCurrentTerm = &leaderCurrentTerm;
  args.leaderPrevLogIndex = &leaderPrevLogIndex;
  args.leaderPrevLogTerm = &leaderPrevLogTerm;
  args.leaderCommitIndex = &leaderCommitIndex;
  args.dep_id = &dep_id;
  args.cmd = &cmd;
  args.followerAppendOK = &followerAppendOK;
  args.followerCurrentTerm = &followerCurrentTerm;
  args.followerLastLogIndex = &followerLastLogIndex;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void FpgaRaftClient::recv_AppendEntries()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("AppendEntries") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  FpgaRaft_AppendEntries_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  return;
}

void FpgaRaftClient::AppendEntries2(const int64_t slot, const ballot_t& ballot, const int64_t leaderCurrentTerm, const int64_t leaderPrevLogIndex, const int64_t leaderPrevLogTerm, const int64_t leaderCommitIndex, const DepId& dep_id, const MarshallDeputy& cmd, const int64_t followerAppendOK, const int64_t followerCurrentTerm, const int64_t followerLastLogIndex)
{
  send_AppendEntries2(slot, ballot, leaderCurrentTerm, leaderPrevLogIndex, leaderPrevLogTerm, leaderCommitIndex, dep_id, cmd, followerAppendOK, followerCurrentTerm, followerLastLogIndex);
  recv_AppendEntries2();
}

void FpgaRaftClient::send_AppendEntries2(const int64_t slot, const ballot_t& ballot, const int64_t leaderCurrentTerm, const int64_t leaderPrevLogIndex, const int64_t leaderPrevLogTerm, const int64_t leaderCommitIndex, const DepId& dep_id, const MarshallDeputy& cmd, const int64_t followerAppendOK, const int64_t followerCurrentTerm, const int64_t followerLastLogIndex)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("AppendEntries2", ::apache::thrift::protocol::T_CALL, cseqid);

  FpgaRaft_AppendEntries2_pargs args;
  args.slot = &slot;
  args.ballot = &ballot;
  args.leaderCurrentTerm = &leaderCurrentTerm;
  args.leaderPrevLogIndex = &leaderPrevLogIndex;
  args.leaderPrevLogTerm = &leaderPrevLogTerm;
  args.leaderCommitIndex = &leaderCommitIndex;
  args.dep_id = &dep_id;
  args.cmd = &cmd;
  args.followerAppendOK = &followerAppendOK;
  args.followerCurrentTerm = &followerCurrentTerm;
  args.followerLastLogIndex = &followerLastLogIndex;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void FpgaRaftClient::recv_AppendEntries2()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("AppendEntries2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  FpgaRaft_AppendEntries2_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  return;
}

void FpgaRaftClient::Decide(const int64_t slot, const ballot_t& ballot, const DepId& dep_id, const MarshallDeputy& cmd)
{
  send_Decide(slot, ballot, dep_id, cmd);
  recv_Decide();
}

void FpgaRaftClient::send_Decide(const int64_t slot, const ballot_t& ballot, const DepId& dep_id, const MarshallDeputy& cmd)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("Decide", ::apache::thrift::protocol::T_CALL, cseqid);

  FpgaRaft_Decide_pargs args;
  args.slot = &slot;
  args.ballot = &ballot;
  args.dep_id = &dep_id;
  args.cmd = &cmd;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void FpgaRaftClient::recv_Decide()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("Decide") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  FpgaRaft_Decide_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  return;
}

bool FpgaRaftProcessor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) {
  ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    iprot->skip(::apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    ::apache::thrift::TApplicationException x(::apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '"+fname+"'");
    oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return true;
  }
  (this->*(pfn->second))(seqid, iprot, oprot, callContext);
  return true;
}

void FpgaRaftProcessor::process_Heartbeat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = nullptr;
  if (this->eventHandler_.get() != nullptr) {
    ctx = this->eventHandler_->getContext("FpgaRaft.Heartbeat", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "FpgaRaft.Heartbeat");

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->preRead(ctx, "FpgaRaft.Heartbeat");
  }

  FpgaRaft_Heartbeat_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->postRead(ctx, "FpgaRaft.Heartbeat", bytes);
  }

  FpgaRaft_Heartbeat_result result;
  try {
    iface_->Heartbeat(args.leaderPrevLogIndex, args.dep_id, args.followerPrevLogIndex);
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != nullptr) {
      this->eventHandler_->handlerError(ctx, "FpgaRaft.Heartbeat");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("Heartbeat", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->preWrite(ctx, "FpgaRaft.Heartbeat");
  }

  oprot->writeMessageBegin("Heartbeat", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->postWrite(ctx, "FpgaRaft.Heartbeat", bytes);
  }
}

void FpgaRaftProcessor::process_Forward(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = nullptr;
  if (this->eventHandler_.get() != nullptr) {
    ctx = this->eventHandler_->getContext("FpgaRaft.Forward", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "FpgaRaft.Forward");

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->preRead(ctx, "FpgaRaft.Forward");
  }

  FpgaRaft_Forward_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->postRead(ctx, "FpgaRaft.Forward", bytes);
  }

  FpgaRaft_Forward_result result;
  try {
    iface_->Forward(args.cmd, args.cmt_idx);
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != nullptr) {
      this->eventHandler_->handlerError(ctx, "FpgaRaft.Forward");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("Forward", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->preWrite(ctx, "FpgaRaft.Forward");
  }

  oprot->writeMessageBegin("Forward", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->postWrite(ctx, "FpgaRaft.Forward", bytes);
  }
}

void FpgaRaftProcessor::process_Vote(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = nullptr;
  if (this->eventHandler_.get() != nullptr) {
    ctx = this->eventHandler_->getContext("FpgaRaft.Vote", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "FpgaRaft.Vote");

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->preRead(ctx, "FpgaRaft.Vote");
  }

  FpgaRaft_Vote_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->postRead(ctx, "FpgaRaft.Vote", bytes);
  }

  FpgaRaft_Vote_result result;
  try {
    iface_->Vote(args.lst_log_idx, args.lst_log_term, args.par_id, args.cur_term, args.max_ballot, args.vote_granted);
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != nullptr) {
      this->eventHandler_->handlerError(ctx, "FpgaRaft.Vote");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("Vote", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->preWrite(ctx, "FpgaRaft.Vote");
  }

  oprot->writeMessageBegin("Vote", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->postWrite(ctx, "FpgaRaft.Vote", bytes);
  }
}

void FpgaRaftProcessor::process_Vote2FPGA(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = nullptr;
  if (this->eventHandler_.get() != nullptr) {
    ctx = this->eventHandler_->getContext("FpgaRaft.Vote2FPGA", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "FpgaRaft.Vote2FPGA");

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->preRead(ctx, "FpgaRaft.Vote2FPGA");
  }

  FpgaRaft_Vote2FPGA_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->postRead(ctx, "FpgaRaft.Vote2FPGA", bytes);
  }

  FpgaRaft_Vote2FPGA_result result;
  try {
    iface_->Vote2FPGA(args.lst_log_idx, args.lst_log_term, args.par_id, args.cur_term, args.max_ballot, args.vote_granted);
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != nullptr) {
      this->eventHandler_->handlerError(ctx, "FpgaRaft.Vote2FPGA");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("Vote2FPGA", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->preWrite(ctx, "FpgaRaft.Vote2FPGA");
  }

  oprot->writeMessageBegin("Vote2FPGA", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->postWrite(ctx, "FpgaRaft.Vote2FPGA", bytes);
  }
}

void FpgaRaftProcessor::process_AppendEntries(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = nullptr;
  if (this->eventHandler_.get() != nullptr) {
    ctx = this->eventHandler_->getContext("FpgaRaft.AppendEntries", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "FpgaRaft.AppendEntries");

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->preRead(ctx, "FpgaRaft.AppendEntries");
  }

  FpgaRaft_AppendEntries_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->postRead(ctx, "FpgaRaft.AppendEntries", bytes);
  }

  FpgaRaft_AppendEntries_result result;
  try {
    iface_->AppendEntries(args.slot, args.ballot, args.leaderCurrentTerm, args.leaderPrevLogIndex, args.leaderPrevLogTerm, args.leaderCommitIndex, args.dep_id, args.cmd, args.followerAppendOK, args.followerCurrentTerm, args.followerLastLogIndex);
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != nullptr) {
      this->eventHandler_->handlerError(ctx, "FpgaRaft.AppendEntries");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("AppendEntries", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->preWrite(ctx, "FpgaRaft.AppendEntries");
  }

  oprot->writeMessageBegin("AppendEntries", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->postWrite(ctx, "FpgaRaft.AppendEntries", bytes);
  }
}

void FpgaRaftProcessor::process_AppendEntries2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = nullptr;
  if (this->eventHandler_.get() != nullptr) {
    ctx = this->eventHandler_->getContext("FpgaRaft.AppendEntries2", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "FpgaRaft.AppendEntries2");

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->preRead(ctx, "FpgaRaft.AppendEntries2");
  }

  FpgaRaft_AppendEntries2_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->postRead(ctx, "FpgaRaft.AppendEntries2", bytes);
  }

  FpgaRaft_AppendEntries2_result result;
  try {
    iface_->AppendEntries2(args.slot, args.ballot, args.leaderCurrentTerm, args.leaderPrevLogIndex, args.leaderPrevLogTerm, args.leaderCommitIndex, args.dep_id, args.cmd, args.followerAppendOK, args.followerCurrentTerm, args.followerLastLogIndex);
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != nullptr) {
      this->eventHandler_->handlerError(ctx, "FpgaRaft.AppendEntries2");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("AppendEntries2", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->preWrite(ctx, "FpgaRaft.AppendEntries2");
  }

  oprot->writeMessageBegin("AppendEntries2", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->postWrite(ctx, "FpgaRaft.AppendEntries2", bytes);
  }
}

void FpgaRaftProcessor::process_Decide(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = nullptr;
  if (this->eventHandler_.get() != nullptr) {
    ctx = this->eventHandler_->getContext("FpgaRaft.Decide", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "FpgaRaft.Decide");

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->preRead(ctx, "FpgaRaft.Decide");
  }

  FpgaRaft_Decide_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->postRead(ctx, "FpgaRaft.Decide", bytes);
  }

  FpgaRaft_Decide_result result;
  try {
    iface_->Decide(args.slot, args.ballot, args.dep_id, args.cmd);
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != nullptr) {
      this->eventHandler_->handlerError(ctx, "FpgaRaft.Decide");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("Decide", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->preWrite(ctx, "FpgaRaft.Decide");
  }

  oprot->writeMessageBegin("Decide", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->postWrite(ctx, "FpgaRaft.Decide", bytes);
  }
}

::std::shared_ptr< ::apache::thrift::TProcessor > FpgaRaftProcessorFactory::getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) {
  ::apache::thrift::ReleaseHandler< FpgaRaftIfFactory > cleanup(handlerFactory_);
  ::std::shared_ptr< FpgaRaftIf > handler(handlerFactory_->getHandler(connInfo), cleanup);
  ::std::shared_ptr< ::apache::thrift::TProcessor > processor(new FpgaRaftProcessor(handler));
  return processor;
}

void FpgaRaftConcurrentClient::Heartbeat(const int64_t leaderPrevLogIndex, const DepId& dep_id, const int64_t followerPrevLogIndex)
{
  int32_t seqid = send_Heartbeat(leaderPrevLogIndex, dep_id, followerPrevLogIndex);
  recv_Heartbeat(seqid);
}

int32_t FpgaRaftConcurrentClient::send_Heartbeat(const int64_t leaderPrevLogIndex, const DepId& dep_id, const int64_t followerPrevLogIndex)
{
  int32_t cseqid = this->sync_->generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(this->sync_.get());
  oprot_->writeMessageBegin("Heartbeat", ::apache::thrift::protocol::T_CALL, cseqid);

  FpgaRaft_Heartbeat_pargs args;
  args.leaderPrevLogIndex = &leaderPrevLogIndex;
  args.dep_id = &dep_id;
  args.followerPrevLogIndex = &followerPrevLogIndex;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void FpgaRaftConcurrentClient::recv_Heartbeat(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(this->sync_.get(), seqid);

  while(true) {
    if(!this->sync_->getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("Heartbeat") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      FpgaRaft_Heartbeat_presult result;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      sentry.commit();
      return;
    }
    // seqid != rseqid
    this->sync_->updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_->waitForWork(seqid);
  } // end while(true)
}

void FpgaRaftConcurrentClient::Forward(const MarshallDeputy& cmd, const int64_t cmt_idx)
{
  int32_t seqid = send_Forward(cmd, cmt_idx);
  recv_Forward(seqid);
}

int32_t FpgaRaftConcurrentClient::send_Forward(const MarshallDeputy& cmd, const int64_t cmt_idx)
{
  int32_t cseqid = this->sync_->generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(this->sync_.get());
  oprot_->writeMessageBegin("Forward", ::apache::thrift::protocol::T_CALL, cseqid);

  FpgaRaft_Forward_pargs args;
  args.cmd = &cmd;
  args.cmt_idx = &cmt_idx;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void FpgaRaftConcurrentClient::recv_Forward(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(this->sync_.get(), seqid);

  while(true) {
    if(!this->sync_->getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("Forward") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      FpgaRaft_Forward_presult result;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      sentry.commit();
      return;
    }
    // seqid != rseqid
    this->sync_->updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_->waitForWork(seqid);
  } // end while(true)
}

void FpgaRaftConcurrentClient::Vote(const int64_t lst_log_idx, const ballot_t& lst_log_term, const parid_t& par_id, const ballot_t& cur_term, const ballot_t& max_ballot, const bool vote_granted)
{
  int32_t seqid = send_Vote(lst_log_idx, lst_log_term, par_id, cur_term, max_ballot, vote_granted);
  recv_Vote(seqid);
}

int32_t FpgaRaftConcurrentClient::send_Vote(const int64_t lst_log_idx, const ballot_t& lst_log_term, const parid_t& par_id, const ballot_t& cur_term, const ballot_t& max_ballot, const bool vote_granted)
{
  int32_t cseqid = this->sync_->generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(this->sync_.get());
  oprot_->writeMessageBegin("Vote", ::apache::thrift::protocol::T_CALL, cseqid);

  FpgaRaft_Vote_pargs args;
  args.lst_log_idx = &lst_log_idx;
  args.lst_log_term = &lst_log_term;
  args.par_id = &par_id;
  args.cur_term = &cur_term;
  args.max_ballot = &max_ballot;
  args.vote_granted = &vote_granted;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void FpgaRaftConcurrentClient::recv_Vote(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(this->sync_.get(), seqid);

  while(true) {
    if(!this->sync_->getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("Vote") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      FpgaRaft_Vote_presult result;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      sentry.commit();
      return;
    }
    // seqid != rseqid
    this->sync_->updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_->waitForWork(seqid);
  } // end while(true)
}

void FpgaRaftConcurrentClient::Vote2FPGA(const int64_t lst_log_idx, const ballot_t& lst_log_term, const parid_t& par_id, const ballot_t& cur_term, const ballot_t& max_ballot, const bool vote_granted)
{
  int32_t seqid = send_Vote2FPGA(lst_log_idx, lst_log_term, par_id, cur_term, max_ballot, vote_granted);
  recv_Vote2FPGA(seqid);
}

int32_t FpgaRaftConcurrentClient::send_Vote2FPGA(const int64_t lst_log_idx, const ballot_t& lst_log_term, const parid_t& par_id, const ballot_t& cur_term, const ballot_t& max_ballot, const bool vote_granted)
{
  int32_t cseqid = this->sync_->generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(this->sync_.get());
  oprot_->writeMessageBegin("Vote2FPGA", ::apache::thrift::protocol::T_CALL, cseqid);

  FpgaRaft_Vote2FPGA_pargs args;
  args.lst_log_idx = &lst_log_idx;
  args.lst_log_term = &lst_log_term;
  args.par_id = &par_id;
  args.cur_term = &cur_term;
  args.max_ballot = &max_ballot;
  args.vote_granted = &vote_granted;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void FpgaRaftConcurrentClient::recv_Vote2FPGA(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(this->sync_.get(), seqid);

  while(true) {
    if(!this->sync_->getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("Vote2FPGA") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      FpgaRaft_Vote2FPGA_presult result;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      sentry.commit();
      return;
    }
    // seqid != rseqid
    this->sync_->updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_->waitForWork(seqid);
  } // end while(true)
}

void FpgaRaftConcurrentClient::AppendEntries(const int64_t slot, const ballot_t& ballot, const int64_t leaderCurrentTerm, const int64_t leaderPrevLogIndex, const int64_t leaderPrevLogTerm, const int64_t leaderCommitIndex, const DepId& dep_id, const MarshallDeputy& cmd, const int64_t followerAppendOK, const int64_t followerCurrentTerm, const int64_t followerLastLogIndex)
{
  int32_t seqid = send_AppendEntries(slot, ballot, leaderCurrentTerm, leaderPrevLogIndex, leaderPrevLogTerm, leaderCommitIndex, dep_id, cmd, followerAppendOK, followerCurrentTerm, followerLastLogIndex);
  recv_AppendEntries(seqid);
}

int32_t FpgaRaftConcurrentClient::send_AppendEntries(const int64_t slot, const ballot_t& ballot, const int64_t leaderCurrentTerm, const int64_t leaderPrevLogIndex, const int64_t leaderPrevLogTerm, const int64_t leaderCommitIndex, const DepId& dep_id, const MarshallDeputy& cmd, const int64_t followerAppendOK, const int64_t followerCurrentTerm, const int64_t followerLastLogIndex)
{
  int32_t cseqid = this->sync_->generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(this->sync_.get());
  oprot_->writeMessageBegin("AppendEntries", ::apache::thrift::protocol::T_CALL, cseqid);

  FpgaRaft_AppendEntries_pargs args;
  args.slot = &slot;
  args.ballot = &ballot;
  args.leaderCurrentTerm = &leaderCurrentTerm;
  args.leaderPrevLogIndex = &leaderPrevLogIndex;
  args.leaderPrevLogTerm = &leaderPrevLogTerm;
  args.leaderCommitIndex = &leaderCommitIndex;
  args.dep_id = &dep_id;
  args.cmd = &cmd;
  args.followerAppendOK = &followerAppendOK;
  args.followerCurrentTerm = &followerCurrentTerm;
  args.followerLastLogIndex = &followerLastLogIndex;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void FpgaRaftConcurrentClient::recv_AppendEntries(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(this->sync_.get(), seqid);

  while(true) {
    if(!this->sync_->getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("AppendEntries") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      FpgaRaft_AppendEntries_presult result;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      sentry.commit();
      return;
    }
    // seqid != rseqid
    this->sync_->updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_->waitForWork(seqid);
  } // end while(true)
}

void FpgaRaftConcurrentClient::AppendEntries2(const int64_t slot, const ballot_t& ballot, const int64_t leaderCurrentTerm, const int64_t leaderPrevLogIndex, const int64_t leaderPrevLogTerm, const int64_t leaderCommitIndex, const DepId& dep_id, const MarshallDeputy& cmd, const int64_t followerAppendOK, const int64_t followerCurrentTerm, const int64_t followerLastLogIndex)
{
  int32_t seqid = send_AppendEntries2(slot, ballot, leaderCurrentTerm, leaderPrevLogIndex, leaderPrevLogTerm, leaderCommitIndex, dep_id, cmd, followerAppendOK, followerCurrentTerm, followerLastLogIndex);
  recv_AppendEntries2(seqid);
}

int32_t FpgaRaftConcurrentClient::send_AppendEntries2(const int64_t slot, const ballot_t& ballot, const int64_t leaderCurrentTerm, const int64_t leaderPrevLogIndex, const int64_t leaderPrevLogTerm, const int64_t leaderCommitIndex, const DepId& dep_id, const MarshallDeputy& cmd, const int64_t followerAppendOK, const int64_t followerCurrentTerm, const int64_t followerLastLogIndex)
{
  int32_t cseqid = this->sync_->generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(this->sync_.get());
  oprot_->writeMessageBegin("AppendEntries2", ::apache::thrift::protocol::T_CALL, cseqid);

  FpgaRaft_AppendEntries2_pargs args;
  args.slot = &slot;
  args.ballot = &ballot;
  args.leaderCurrentTerm = &leaderCurrentTerm;
  args.leaderPrevLogIndex = &leaderPrevLogIndex;
  args.leaderPrevLogTerm = &leaderPrevLogTerm;
  args.leaderCommitIndex = &leaderCommitIndex;
  args.dep_id = &dep_id;
  args.cmd = &cmd;
  args.followerAppendOK = &followerAppendOK;
  args.followerCurrentTerm = &followerCurrentTerm;
  args.followerLastLogIndex = &followerLastLogIndex;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void FpgaRaftConcurrentClient::recv_AppendEntries2(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(this->sync_.get(), seqid);

  while(true) {
    if(!this->sync_->getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("AppendEntries2") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      FpgaRaft_AppendEntries2_presult result;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      sentry.commit();
      return;
    }
    // seqid != rseqid
    this->sync_->updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_->waitForWork(seqid);
  } // end while(true)
}

void FpgaRaftConcurrentClient::Decide(const int64_t slot, const ballot_t& ballot, const DepId& dep_id, const MarshallDeputy& cmd)
{
  int32_t seqid = send_Decide(slot, ballot, dep_id, cmd);
  recv_Decide(seqid);
}

int32_t FpgaRaftConcurrentClient::send_Decide(const int64_t slot, const ballot_t& ballot, const DepId& dep_id, const MarshallDeputy& cmd)
{
  int32_t cseqid = this->sync_->generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(this->sync_.get());
  oprot_->writeMessageBegin("Decide", ::apache::thrift::protocol::T_CALL, cseqid);

  FpgaRaft_Decide_pargs args;
  args.slot = &slot;
  args.ballot = &ballot;
  args.dep_id = &dep_id;
  args.cmd = &cmd;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void FpgaRaftConcurrentClient::recv_Decide(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(this->sync_.get(), seqid);

  while(true) {
    if(!this->sync_->getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("Decide") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      FpgaRaft_Decide_presult result;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      sentry.commit();
      return;
    }
    // seqid != rseqid
    this->sync_->updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_->waitForWork(seqid);
  } // end while(true)
}

} // namespace

